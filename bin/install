#!/usr/bin/env bash

set -euo pipefail

[ -z "${ASDF_INSTALL_TYPE+x}" ] && echo "ASDF_INSTALL_TYPE is required" && exit 1
[ -z "${ASDF_INSTALL_VERSION+x}" ] && echo "ASDF_INSTALL_VERSION is required" && exit 1
[ -z "${ASDF_INSTALL_PATH+x}" ] && echo "ASDF_INSTALL_PATH is required" && exit 1

get_platform() {
  local platform
  platform="$(uname | tr '[:upper:]' '[:lower:]')"

  case "$platform" in
  linux | darwin)
    echo "Platform '${platform}' supported!" >&2
    ;;
  *)
    echo "Platform '${platform}' not supported!" >&2
    exit 1
    ;;
  esac

  echo -n "$platform"
}

get_arch() {
  local arch=""

  case "$(uname -m)" in
  x86_64 | amd64) arch="amd64" ;;
  i686 | i386) arch="386" ;;
  *)
    echo "Arch '$(uname -m)' not supported!" >&2
    exit 1
    ;;
  esac

  echo -n $arch
}

my_mktemp() {
  local tempdir=""

  if [ "linux" = "$1" ]; then
    tempdir=$(mktemp -d asdf-aks-engine.XXXX)
  else
    tempdir=$(mktemp -dt asdf-aks-engine.XXXX)
  fi

  echo -n "$tempdir"
}

install() {
  local install_type=$1
  [ "$install_type" != "version" ] && echo "intall type, $install_type, is not supported" && exit 1

  local version=$2
  local install_path=$3
  local platform=$(get_platform)
  local arch=$(get_arch)
  local tmp_download_dir=$(my_mktemp "$platform")

  local bin_install_path="$install_path/bin"
  local bin_path="${bin_install_path}/aks-engine"

  local tarball_dir_name="aks-engine-v${version}-${platform}-${arch}"
  local tarball_file_name="$tarball_dir_name.tar.gz"
  local tmp_download_file="$tmp_download_dir/$tarball_file_name"

  local download_url="https://github.com/Azure/aks-engine/releases/download/v${version}/$tarball_file_name"
  mkdir -p "${bin_install_path}"
  curl -sL "$download_url" -o "$tmp_download_file"

  mkdir -p "${tmp_download_dir}${tarball_dir_name}"
  tar zxf "$tmp_download_file" -C "$tmp_download_dir" --strip-components=1 || exit 1
  mv "$tmp_download_dir/aks-engine" "$bin_path"

  chmod +x "$bin_path"
}

install "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
